<?php

namespace AppBundle\Repository;

/**
 * ContentItemRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ContentItemRepository extends \Doctrine\ORM\EntityRepository
{
    /**
     * Get Query for content items ordered by publishedDate.
     *
     * @return \Doctrine\ORM\Query
     */
    public function getItems()
    {
        $qb = $this->createQueryBuilder('c');

        return $qb->getQuery();
    }

    /**
     * Get Query for content items valid for update.
     *
     * @param integer $maxResults
     *
     * @return \Doctrine\ORM\Query
     */
    public function getValidContentItems($maxResults = 15)
    {
        $publishDate = new \DateTime();
        $valuesUpdatedDate = new \DateTime();
        $publishDate->modify('-30 days');
        $valuesUpdatedDate->modify('-2 hours');

        $qb = $this->createQueryBuilder('c')
            ->where('c.publishedDate >= :publishDate')
            ->andWhere('c.valuesUpdatedDate <= :valuesUpdatedDate')
            ->setParameters([
                'publishDate' => $publishDate,
                'valuesUpdatedDate' => $valuesUpdatedDate
            ])
            ->setMaxResults($maxResults);

        return $qb->getQuery();
    }

    /**
     * Get Query for content items valid for points recalculation.
     *
     * @param integer $maxResults
     *
     * @return \Doctrine\ORM\Query
     */
    public function getMaintainedItems($maxResults = 15)
    {
        $publishDate = new \DateTime();
        $publishDate->modify('-7 days');

        $qb = $this->createQueryBuilder('c')
            ->where('c.publishedDate >= :publishDate')
            ->andWhere('c.pointsCalculatedDate <= c.valuesUpdatedDate')
            ->setParameters([
                'publishDate' => $publishDate,
            ])
            ->setMaxResults($maxResults);

        return $qb->getQuery();
    }
}
